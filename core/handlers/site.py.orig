# -*- coding: utf-8 -*-
'''
Created on Sept 26, 2013

@author: Rafael Nunes
'''
import logging as log 

from google.appengine.api import mail

from webapp2 import redirect_to, redirect, uri_for

from webapp2_extras.auth import InvalidAuthIdError
from webapp2_extras.auth import InvalidPasswordError

from core.base import BaseHandler
from core.util import strip_tags
import settings


class SiteHandler(BaseHandler):
	def login(self):
		if self.request.method == 'POST':
			user = self.request.get('username')
			passwd = self.request.get('passwd')
			is_remember = True if self.request.get('remember') else False

			try:
				auth = self.auth
				auth_user = auth.get_user_by_password(user, passwd, remember=is_remember)
				return self.redirect('/subjects', permanent=True)
			except (InvalidAuthIdError, InvalidPasswordError):
				log.info('Login failed. Wrong email or password: %s | %s' %(user, passwd))
				errors = ['Login failed. Wrong email or password!']
				return self.render('login.html', errors=errors, username=user)

			except Exception as e:
				log.info(str(e))
				errors = [str(e)]
				return self.render('login.html', errors=errors, username=user)
		else:
			return self.render('login.html')

	def login_facebook(self):

		self.render_json({'redirect_to': uri_for('dashboard')})


	def register(self):
		email = self.request.get('email')
		passwd = self.request.get('passwd')

		user_data = self.user_model.create_user(email, [], 
			email_address=email, name='', password_raw=passwd, 
			last_name='', verified=False)
		
		# If not user_data, create failed
		user = user_data[1]
		user_id = user.get_id()

		#send welcome email
		email_html = self.render_str('email/signup.html')
		mail.send_mail(sender=settings.EMAIL_SENDER,
			to=email,
			subject='Welcome aboard!',
			body=strip_tags(email_html),
			html=email_html,
		)
		
		return redirect('/subjects')

	def logout(self):
		self.auth.unset_session()
		self.redirect('/')


class VerificationHandler(BaseHandler):
  def get(self):
	user = None
	user_id = self.request.get('user_id', 0)
	signup_token = self.request.get('signup_token')
	verification_type = self.request.get('type')

	user, timestamp = self.user_model.get_by_auth_token(int(user_id), signup_token, 'signup')

	if not user:
		return self.render('verification.html', errors=['Error in verification'])

	self.auth.set_session(self.auth.store.user_to_dict(user), remember=True)

	# remove signup token, we don't want users to come back with an old link
	self.user_model.delete_signup_token(user.get_id(), signup_token)

	if not user.verified:
		user.verified = True
		user.put()

	return redirect('/subjects')
